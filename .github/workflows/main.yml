name: PHPCrypton Functional Testing

on:
  push:
    branches:
      - main

jobs:
  # build-image:
  #   name: Build Images
  #   runs-on: ubuntu-latest    
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4 

  #     - name: Build PHPCrypton Image
  #       run: docker build -t phpcrypton:latest .

  #     - name: Save PHPCrypton Image to Artifact
  #       run: docker save -o /tmp/phpcrypton.tar phpcrypton:latest

  #     - name: Upload Artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: phpcrypton
  #         path: /tmp/phpcrypton.tar
          
  dast:
    name: Dynamic Analysis
    # needs: build-image
    runs-on: ubuntu-latest
    services:
      docker-apache:
        image: phpcrypton:latest
        container_name: docker-apache
        ports:
          - "80:80"

      mysql-db:
        image: mysql:latest
        container_name: docker-mysql
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: badcrud
          MYSQL_ROOT_HOST: "%"
        ports:
          - "3306:3306"
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        volumes:
          - ./db/badcrud.sql:/docker-entrypoint-initdb.d/badcrud.sql:ro
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create isolated network
        run: docker network create --driver bridge isolated 

      - name: Download image from artifact
        uses: actions/download-artifact@v3
        with:
          name: phpcrypton
          path: /tmp
      
      - name: Load saved image
        run: docker load < /tmp/phpcrypton.tar

      - name: Run PHPCrypton Container
        run: docker-compose up -d

      - name: Check host directory
        run: |
              pwd
              ls -la
              ls -la db/
              
      - name: Copy source code to PHPCrypton container
        run: docker cp web2/. docker-apache:/var/www/html

      - name: Obfuscate
        run: docker exec docker-apache php -r "PHPCrypton::obfuscate('/var/www/html/');"

      - name: Check inside PHPCrypton container
        run: |
          docker exec docker-apache ls -la /var/www/html/
          docker exec docker-apache cat /var/www/html/index.php
          docker exec docker-apache php /var/www/html/cek_koneksi.php

      # - name: Check inside MySQL container
      #   run: |
      #     docker exec docker-mysql mysql -uroot -ppassword -hlocalhost

      - name: Get AUT URL
        run: |
          URL=$(ip -f inet -o addr show docker0 | awk '{print $4}' | cut -d '/' -f 1)
          echo "URL=$URL" >> $GITHUB_ENV

      - name: Check AUT URL
        run: |
          curl -L http://${{ env.URL }}/cek_koneksi.php
      
      - name: Context Setup
        # env:
        #     # Set a previously defined secret as an environment variable for this step:
        #     AUTURL: ${{secrets.B64PASSWORD}}
        # Replace the "AUTURL" string in the context file with the real base64-encoded password:
        run: |
          sed -ie "s/AUTURL/${{ env.URL }}/" badcrud.context
          cat badcrud.context
          
      # - name: ZAP Scan
      #   uses: hermanka/action-full-scan@master
      #   with:
      #     target: http://${{ env.URL }}
      #     network_name: isolated
      #     # Additional command line options
      #     # -j   runs the AJAX spider
      #     # -U   specifies which user to select from the context file
      #     cmd_options: -U "admin" -n badcrud.context
          
      - name: stop docker
        run: docker stop docker-apache

  # performance-test:
  #   name: Performance Test
  #   needs: build-image
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: just hello
  #       run: echo "Hello World!"